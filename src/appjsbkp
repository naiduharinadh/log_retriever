import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await fetch('http://localhost:3001/api/logs');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setLogs(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching logs:", error);
        setError(error.message);
        setLoading(false);
      }
    };

    // Fetch logs initially
    fetchLogs();

    // Set up polling every 30 seconds
    const intervalId = setInterval(fetchLogs, 30000);

    // Cleanup interval on component unmount
    return () => clearInterval(intervalId);
  }, []);

  // Format timestamp to local date and time
  const formatTimestamp = (timestamp) => {
    return new Date(timestamp).toLocaleString();
  };

  return (
    <div className="App">
      <h1>CloudWatch Logs Viewer</h1>
      <div className="status-bar">
        <span>Status: {loading ? 'Updating...' : 'Live'}</span>
        {error && <span className="error-message">Error: {error}</span>}
      </div>
      
      <div className="logs-container">
        {loading && logs.length === 0 ? (
          <div className="loading">Loading logs...</div>
        ) : logs.length > 0 ? (
          <table className="logs-table">
            <thead>
              <tr>
                <th>Timestamp</th>
                <th>Message</th>
                <th>Event ID</th>
              </tr>
            </thead>
            <tbody>
              {logs.map((log) => (
                <tr key={log.eventId} className="log-entry">
                  <td className="timestamp">
                    {formatTimestamp(log.timestamp)}
                  </td>
                  <td className="message">
                    {log.message}
                  </td>
                  <td className="event-id">
                    {log.eventId.substring(0, 8)}...
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <div className="no-logs">No logs found</div>
        )}
      </div>
    </div>
  );
}

export default App;

